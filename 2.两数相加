给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807





1.思路就是安个位十位百位分别处理
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        lvalue=0
        i=0
        res = ListNode(0)
        restemp = res
        while l1:
            lvalue += l1.val*pow(10,i)
            l1 = l1.next
            i+=1
        i=0
        while l2:
            lvalue += l2.val*pow(10,i)
            l2 = l2.next
            i+=1
        #j = int(math.log10(lvalue))+1
        while 1:
            restemp.next = ListNode(lvalue%10)
            lvalue = lvalue//10
            if lvalue <= 0:
                break
            else:
                restemp = restemp.next
        return res.next
