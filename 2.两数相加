给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

#golang
a.
func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {
    var enter,sum int
    var res = new(ListNode)
    node1 := l1
	node2 := l2
    node3 := res
    for (node1 != nil || node2 != nil || enter >0){
		node3.Next = new(ListNode)
		node3 = node3.Next
	    b := 0 
        c := 0 
        if node1 != nil { 
            b = node1.Val 
        } 
        if node2 != nil { 
            c = node2.Val 
        }
        sum = b + c + enter
        node3.Val = sum%10
        enter = sum/10
        if node1 != nil {
            node1 = node1.Next
        }
        if node2 != nil{
            node2 = node2.Next
        }
    }
    return res.Next
}
b.递归
/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode { 
    if l1 == nil { 
        return l2 
    } 
    if l2 == nil { 
        return l1 
    } 
    sum := l1.Val + l2.Val 
    nextNode := addTwoNumbers(l1.Next, l2.Next) 
    if sum < 10 { 
        return &ListNode{ 
            Val: sum, 
            Next: nextNode ,
            } 
    } else { 
        tempNode := &ListNode{ 
            Val: 1, 
            Next: nil, 
        } 
        return &ListNode{ 
            Val: sum - 10, 
            Next: addTwoNumbers(nextNode, tempNode), 
        } 
    } 
} 

#python
1.思路就是安个位十位百位分别处理(缺点，未充分利用l1,l2)
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        lvalue=0
        i=0
        res = ListNode(0)
        restemp = res
        while l1:
            lvalue += l1.val*pow(10,i)
            l1 = l1.next
            i+=1
        i=0
        while l2:
            lvalue += l2.val*pow(10,i)
            l2 = l2.next
            i+=1
        #j = int(math.log10(lvalue))+1
        while 1:
            restemp.next = ListNode(lvalue%10)
            lvalue = lvalue//10
            if lvalue <= 0:
                break
            else:
                restemp = restemp.next
        return res.next
2.
class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        enter=0
        res = ListNode(0)
        restemp = res
        while l1 or l2:
            x = l1.val if l1 else 0
            y = l2.val if l2 else 0
            sum = x + y + enter
            enter = sum // 10
            if l1:#长度肯不一样
                l1 = l1.next
            if l2:
                l2 = l2.next
            restemp.next = ListNode(sum % 10)
            restemp = restemp.next
        if enter != 0:  #注意只有一个值切金伟的情况
            restemp.next = ListNode(1)
        return res.next
