给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。

示例 1:

输入: 123
输出: 321
 示例 2:

输入: -123
输出: -321
示例 3:

输入: 120
输出: 21
注意:

假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。


#golang
#a.位运算+幂运算，这里幂运算需要找到更好的运算方式
func reverse(x int) int {
    var y int
    for(x != 0 ){
        y = y*10 + x%10
        x=x/10
    }
    z := xqy(2,31)
   if  -z > y || y > (z - 1) {
       return 0
   }
    return y
}

func xqy(x, y int) int{
    if y > 1{
        return x*xqy(x, y-1)
    }
    return x
}

#2.位运算在go中很快，和c差不多，以2进制为单位（没看源码）
···
1<<2
1的二进制为 0001 左移2位 0100. 如果再转成10进制就是4
1 << 1 = 2 
1 << 2 = 4 
1 << 3 = 8 
1 << 4 = 16 
1 << 5 = 32 
1 << 6 = 64 
1 << 7 = 128 
1 << 8 = 256 
1 << 9 = 512 
···
func reverse(x int) int {
    var y int
    for(x != 0 ){
        y = y*10 + x%10
        x=x/10
    }
    if  -1 << 31 > y || y > (1 << 31 - 1) {
        return 0
    }
    return y
}
