给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。
示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]


1.
class Solution(object):
    def twoSum(self, nums, target):
        j = -1
        for i in range(1,len(nums)):
            temp = nums[:i] + nums[i+1:]
            if (target - nums[i]) in temp:
                j = temp.index(target - nums[i])
                if j >= i:
                    j = j + 1
                break
        if j > -1:
            return [j,i]
            
 2.只需要考虑某个数之前的数，避免重复查找
 class Solution(object):
    def twoSum(self, nums, target):
        j = -1
        for i in range(1,len(nums)):
            temp = nums[:i]
            if (target - nums[i]) in temp:
                j = temp.index(target - nums[i])
                break
        if j > -1:
            return [j,i]
            
 3.还是map快
 class Solution(object):
    def twoSum(self, nums, target):
        dct = {}
        for i,n in enumerate(nums):
            if target - n in dct:
                return dct[target - n], i
            dct[n] = i
